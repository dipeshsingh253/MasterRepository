


// by default @Query uses JPQL //


=> JPQL 

@Query("SELECT u FROM User u WHERE u.status = 1")
List<Student> findAllActiveUsers();


=> Native

@Query(
	value = "SELECT * FROM USERS u WHERE u.status = 1",
	nativeQuery = true
	)
List<Student> findAllActiveUsers();




// Defining Order in Query //


repository.findAll(Sort.by(Sort.Direction.ASC, "propertyName")); // sorting by name of property.



repository.findAll(JpaSort.unsafe("LENGTH(propertyName)")) // sorting by length of a name property.


When we use:

Sort.by("LENGTH(propertyName)");

then we'll receive exactly the same exception as we saw above for the findAll() method.

When Spring Data discovers the unsafe Sort order for a method that uses the @Query annotation, then it just appends the sort clause to the query â€” it skips checking whether the property to sort by belongs to the domain model.


Note : When the @Query annotation uses native SQL, then it's not possible to define a Sort.




// Defining Pagination in Query //

Pagination allows us to return just a subset of a whole result in a Page. This is useful, for example, when navigating through several pages of data on a web page.

Another advantage of pagination is that the amount of data sent from server to client is minimized. By sending smaller pieces of data, we can generally see an improvement in performance.



=> JPQL

@Query(value = "SELECT u FROM User u ORDER BY id")
Page<User> findAllUsersWithPagination(Pageable pageable);

=> Native

@Query(
  value = "SELECT * FROM Users ORDER BY id", 
  countQuery = "SELECT count(*) FROM Users", 
  nativeQuery = true
  )
Page<User> findAllUsersWithPagination(Pageable pageable);



// Indexed Query Parameters //


=> JPQL

@Query("SELECT u FROM User u WHERE u.status = ?1")
User findUserByStatus(Integer status);

@Query("SELECT u FROM User u WHERE u.status = ?1 and u.name = ?2")
User findUserByStatusAndName(Integer status, String name);


=> Native

@Query(
  value = "SELECT * FROM Users u WHERE u.status = ?1", 
  nativeQuery = true
  )
User findUserByStatusNative(Integer status);


// Named Parameters //


=> JPQL

@Query("SELECT u FROM User u WHERE u.status = :status and u.name = :name")
User findUserByStatusAndNameNamedParams(
  @Param("status") Integer status, 
  @Param("name") String name
  );


=> Native

@Query(value = "SELECT * FROM Users u WHERE u.status = :status and u.name = :name", 
  nativeQuery = true
  )
User findUserByStatusAndNameNamedParamsNative(
  @Param("status") Integer status, @Param("name") String name
  );


  // Collection as Parameter //


  Let's consider the case when the where clause of our JPQL or SQL query contains the IN (or NOT IN) keyword:



  SELECT u FROM User u WHERE u.name IN :names;


  In this case, we can define a query method that takes Collection as a parameter:


  @Query(value = "SELECT u FROM User u WHERE u.name IN :names")
  List<User> findUserByNameList(@Param("names") Collection<String> names);



  // Update Queries with Modifying // 

  => JPQL

@Modifying
@Query("update User u set u.status = :status where u.name = :name")
int updateUserSetStatusForName(@Param("status") Integer status, 
  @Param("name") String name);


=> Native

@Modifying
@Query(value = "update Users u set u.status = ? where u.name = ?", 
  nativeQuery = true)
int updateUserSetStatusForNameNative(Integer status, String name);


// Inser Queries with Modifying //

Note : To perform an insert operation, we have to both apply @Modifying and use a native query since INSERT is not a part of the JPA interface.

@Modifying
@Query(
  value = 
    "insert into Users (name, age, email, status) values (:name, :age, :email, :status)",
  nativeQuery = true)
void insertUser(@Param("name") String name, @Param("age") Integer age, 
  @Param("status") Integer status, @Param("email") String email);



  // Dynamic Query // 
  link : https://www.baeldung.com/spring-data-jpa-query#1-example-of-a-dynamic-query


  Often, we'll encounter the need for building SQL statements based on conditions or data sets whose values are only known at runtime. And in those cases, we can't just use a static query.


  => Solution to Dynamic Query : https://www.baeldung.com/spring-data-jpa-query#2-custom-repositories-and-the-jpa-criteria-api

  
